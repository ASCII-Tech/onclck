/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/HLgD5FQwufI
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import Link from "next/link"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogBody, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select } from "@/components/ui/select"

export function Products() {
  const [products, setProducts] = useState([
    {
      id: 1,
      name: "Acme Circles T-Shirt",
      description: "60% combed ringspun cotton/40% polyester jersey tee.",
      price: 19.99,
      stock: 100,
      sku: "ACME-001",
      category: "Clothing",
    },
    {
      id: 2,
      name: "Gamer Gear Pro Controller",
      description: "High-performance gaming controller.",
      price: 59.99,
      stock: 50,
      sku: "GGPC-001",
      category: "Electronics",
    },
    {
      id: 3,
      name: "Luminous VR Headset",
      description: "Immersive virtual reality experience.",
      price: 199.99,
      stock: 25,
      sku: "LVRS-001",
      category: "Electronics",
    },
    {
      id: 4,
      name: "Cozy Blanket",
      description: "Warm and soft for chilly nights.",
      price: 29.99,
      stock: 75,
      sku: "COZB-001",
      category: "Home",
    },
    {
      id: 5,
      name: "Autumn Mug",
      description: "Enjoy your hot beverages in style.",
      price: 12.99,
      stock: 100,
      sku: "AUTM-001",
      category: "Home",
    },
  ])
  const [searchTerm, setSearchTerm] = useState("")
  const [sortColumn, setSortColumn] = useState("name")
  const [sortDirection, setSortDirection] = useState("asc")
  const [showAddProductModal, setShowAddProductModal] = useState(false)
  const [newProduct, setNewProduct] = useState({
    name: "",
    description: "",
    price: 0,
    stock: 0,
    sku: "",
    category: "",
    images: [],
    tags: [],
  })
  const handleSearch = (event) => {
    setSearchTerm(event.target.value)
  }
  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortColumn(column)
      setSortDirection("asc")
    }
  }
  const handleAddProduct = () => {
    setShowAddProductModal(true)
  }
  const handleCloseAddProductModal = () => {
    setShowAddProductModal(false)
    setNewProduct({
      name: "",
      description: "",
      price: 0,
      stock: 0,
      sku: "",
      category: "",
      images: [],
      tags: [],
    })
  }
  const handleSaveProduct = () => {
    setProducts([...products, newProduct])
    handleCloseAddProductModal()
  }
  const handleInputChange = (event) => {
    setNewProduct({
      ...newProduct,
      [event.target.name]: event.target.value,
    })
  }
  const handleImageUpload = (event) => {
    setNewProduct({
      ...newProduct,
      images: [...newProduct.images, event.target.files[0]],
    })
  }
  const handleTagAdd = (tag) => {
    setNewProduct({
      ...newProduct,
      tags: [...newProduct.tags, tag],
    })
  }
  const handleTagRemove = (index) => {
    const updatedTags = [...newProduct.tags]
    updatedTags.splice(index, 1)
    setNewProduct({
      ...newProduct,
      tags: updatedTags,
    })
  }
  const filteredProducts = products.filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))
  const sortedProducts = filteredProducts.sort((a, b) => {
    if (a[sortColumn] < b[sortColumn]) return sortDirection === "asc" ? -1 : 1
    if (a[sortColumn] > b[sortColumn]) return sortDirection === "asc" ? 1 : -1
    return 0
  })
  return (
    <div className="container mx-auto py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Products</h1>
        <Link href="/addproduct">
          <Button>Add New Product</Button>
        </Link>
      </div>
      <div className="mb-6">
        <Input placeholder="Search products..." value={searchTerm} onChange={handleSearch} className="w-full" />
      </div>
      <div className="overflow-x-auto">
        <table className="w-full table-auto">
          <thead>
            <tr>
              <th className="px-4 py-2 text-left cursor-pointer" onClick={() => handleSort("name")}>
                Product Name{" "}
                {sortColumn === "name" && <span className="ml-2">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>}
              </th>
              <th className="px-4 py-2 text-left cursor-pointer" onClick={() => handleSort("description")}>
                Description{" "}
                {sortColumn === "description" && (
                  <span className="ml-2">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                )}
              </th>
              <th className="px-4 py-2 text-left cursor-pointer" onClick={() => handleSort("price")}>
                Price{" "}
                {sortColumn === "price" && (
                  <span className="ml-2">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                )}
              </th>
              <th className="px-4 py-2 text-left cursor-pointer" onClick={() => handleSort("stock")}>
                Stock{" "}
                {sortColumn === "stock" && (
                  <span className="ml-2">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                )}
              </th>
              <th className="px-4 py-2 text-left cursor-pointer" onClick={() => handleSort("sku")}>
                SKU{" "}
                {sortColumn === "sku" && <span className="ml-2">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>}
              </th>
              <th className="px-4 py-2 text-left cursor-pointer" onClick={() => handleSort("category")}>
                <Link href="#" prefetch={false}>
                  Payment
                </Link>
              </th>
              <th className="px-4 py-2 text-left">Actions</th>
            </tr>
          </thead>
          <tbody>
            {sortedProducts.map((product) => (
              <tr key={product.id}>
                <td className="border px-4 py-2">{product.name}</td>
                <td className="border px-4 py-2">{product.description}</td>
                <td className="border px-4 py-2">${product.price.toFixed(2)}</td>
                <td className="border px-4 py-2">{product.stock}</td>
                <td className="border px-4 py-2">{product.sku}</td>
                <td className="border px-4 py-2">
                  <Link href="#" className="underline" prefetch={false}>
                    {product.category}
                  </Link>
                </td>
                <td className="border px-4 py-2">
                  <div className="flex gap-2">
                    <Button variant="outline">Edit</Button>
                    <Button variant="outline">Delete</Button>
                    <Button variant="outline">View</Button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {showAddProductModal && (
        <Dialog>
          <DialogContent className="w-full max-w-2xl">
            <DialogHeader>
              <DialogTitle>Add New Product</DialogTitle>
              <DialogDescription>Fill out the form to add a new product to the platform.</DialogDescription>
            </DialogHeader>
            <div>
              <form className="grid grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="name">Product Name</Label>
                  <Input id="name" name="name" value={newProduct.name} onChange={handleInputChange} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    name="description"
                    value={newProduct.description}
                    onChange={handleInputChange}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="price">Price</Label>
                  <Input id="price" name="price" type="number" value={newProduct.price} onChange={handleInputChange} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="stock">Stock Quantity</Label>
                  <Input id="stock" name="stock" type="number" value={newProduct.stock} onChange={handleInputChange} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="sku">SKU</Label>
                  <Input id="sku" name="sku" value={newProduct.sku} onChange={handleInputChange} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="category">Category</Label>
                  <Select id="category" name="category" value={newProduct.category} onValueChange={handleInputChange}>
                    <option value="">Select a category</option>
                    <option value="Clothing">Clothing</option>
                    <option value="Electronics">Electronics</option>
                    <option value="Home">Home</option>
                  </Select>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label>Product Images</Label>
                  <div className="flex items-center gap-2">
                    <Input type="file" onChange={handleImageUpload} accept="image/*" />
                    <div className="flex flex-wrap gap-2">
                      {newProduct.images.map((image, index) => (
                        <div key={index} className="relative w-20 h-20 overflow-hidden rounded-md">
                          <img
                            src="/placeholder.svg"
                            alt={`Product Image ${index + 1}`}
                            className="w-full h-full object-cover"
                          />
                          <button
                            type="button"
                            className="absolute top-1 right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center"
                            onClick={() => handleImageRemove(index)}
                          >
                            <XIcon className="h-3 w-3" />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
                <div className="space-y-2 col-span-2">
                  <Label>Tags</Label>
                  <div className="flex flex-wrap gap-2">
                    {newProduct.tags.map((tag, index) => (
                      <div key={index} className="bg-gray-200 rounded-full px-3 py-1 text-sm flex items-center gap-2">
                        {tag}
                        <button
                          type="button"
                          className="text-gray-500 hover:text-gray-700"
                          onClick={() => handleTagRemove(index)}
                        >
                          <XIcon className="h-3 w-3" />
                        </button>
                      </div>
                    ))}
                    <Input
                      type="text"
                      placeholder="Add a tag"
                      onKeyPress={(event) => {
                        if (event.key === "Enter") {
                          handleTagAdd(event.target.value)
                          event.target.value = ""
                        }
                      }}
                    />
                  </div>
                </div>
              </form>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={handleCloseAddProductModal}>
                Cancel
              </Button>
              <Button onClick={handleSaveProduct}>Save Product</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </div>
  )
}

export default Products;

function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
