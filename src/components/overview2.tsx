/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/45VHFJJgUss
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState, useMemo } from "react"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"

export function overview2() {
  const orders = [
    {
      id: "ORD001",
      customer: "John Doe",
      item: "Wireless Headphones",
      description: "High-quality noise-cancelling headphones",
      quantity: 1,
      price: 99.99,
      qrCode: "/qr-code.png",
      status: "Completed",
    },
    {
      id: "ORD002",
      customer: "Jane Smith",
      item: "Fitness Tracker",
      description: "Advanced activity and sleep tracking",
      quantity: 2,
      price: 79.99,
      qrCode: "/qr-code.png",
      status: "Pending",
    },
    {
      id: "ORD003",
      customer: "Michael Johnson",
      item: "Smart TV",
      description: "4K Ultra HD with built-in streaming",
      quantity: 1,
      price: 499.99,
      qrCode: "/qr-code.png",
      status: "Completed",
    },
    {
      id: "ORD004",
      customer: "Emily Davis",
      item: "Gaming Mouse",
      description: "Ergonomic design with programmable buttons",
      quantity: 1,
      price: 59.99,
      qrCode: "/qr-code.png",
      status: "Pending",
    },
    {
      id: "ORD005",
      customer: "David Lee",
      item: "Instant Pot",
      description: "Multi-functional pressure cooker",
      quantity: 1,
      price: 99.99,
      qrCode: "/qr-code.png",
      status: "Completed",
    },
  ]
  const [searchTerm, setSearchTerm] = useState("")
  const [sortColumn, setSortColumn] = useState(null)
  const [sortDirection, setSortDirection] = useState(null)
  const filteredOrders = useMemo(() => {
    return orders.filter((order) =>
      Object.values(order).some((value) => value.toString().toLowerCase().includes(searchTerm.toLowerCase())),
    )
  }, [searchTerm, orders])
  const sortedOrders = useMemo(() => {
    if (!sortColumn) return filteredOrders
    return filteredOrders.sort((a, b) => {
      const valueA = a[sortColumn]
      const valueB = b[sortColumn]
      if (valueA < valueB) return sortDirection === "asc" ? -1 : 1
      if (valueA > valueB) return sortDirection === "asc" ? 1 : -1
      return 0
    })
  }, [filteredOrders, sortColumn, sortDirection])
  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortColumn(column)
      setSortDirection("asc")
    }
  }
  return (
    <div className="flex flex-col min-h-screen w-auto px-20 overflow-hidden">
      <header className="flex h-14 items-center gap-4 border-b bg-muted/40 px-6 lg:h-[60px]">
        <div className="flex-1">
          <h1 className="font-semibold text-lg">Recent Orders</h1>
        </div>
        <div className="relative flex-1 md:grow-0">
          <SearchIcon className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search orders..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-8 sm:w-[300px] md:w-[200px] lg:w-[300px]"
          />
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="rounded-full">
              <img
                src="/placeholder.svg"
                width="32"
                height="32"
                className="rounded-full"
                alt="Avatar"
                style={{ aspectRatio: "32/32", objectFit: "cover" }}
              />
              <span className="sr-only">Toggle user menu</span>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>My Account</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem>Settings</DropdownMenuItem>
            <DropdownMenuItem>Support</DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem>Logout</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </header>
      <main className="flex-1 p-4 md:p-6">
        <div className="border shadow-sm rounded-lg">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="cursor-pointer" onClick={() => handleSort("customer")}>
                  Customer
                  {sortColumn === "customer" && (
                    <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                  )}
                </TableHead>
                <TableHead className="cursor-pointer" onClick={() => handleSort("item")}>
                  Item
                  {sortColumn === "item" && (
                    <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                  )}
                </TableHead>
                <TableHead className="cursor-pointer" onClick={() => handleSort("description")}>
                  Description
                  {sortColumn === "description" && (
                    <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                  )}
                </TableHead>
                <TableHead className="cursor-pointer" onClick={() => handleSort("quantity")}>
                  Quantity
                  {sortColumn === "quantity" && (
                    <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                  )}
                </TableHead>
                <TableHead className="cursor-pointer" onClick={() => handleSort("price")}>
                  Price
                  {sortColumn === "price" && (
                    <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                  )}
                </TableHead>
                <TableHead className="cursor-pointer" onClick={() => handleSort("id")}>
                  Order Code
                  {sortColumn === "id" && <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>}
                </TableHead>
                <TableHead>QR Code</TableHead>
                <TableHead>Status</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {sortedOrders.map((order) => (
                <TableRow key={order.id}>
                  <TableCell>{order.customer}</TableCell>
                  <TableCell>{order.item}</TableCell>
                  <TableCell>{order.description}</TableCell>
                  <TableCell>{order.quantity}</TableCell>
                  <TableCell>${order.price.toFixed(2)}</TableCell>
                  <TableCell>{order.id}</TableCell>
                  <TableCell>
                    <img
                      src="/placeholder.svg"
                      alt={`QR Code for Order ${order.id}`}
                      width={100}
                      height={100}
                      className="mx-auto"
                      style={{ aspectRatio: "100/100", objectFit: "cover" }}
                    />
                  </TableCell>
                  <TableCell
                    className={`font-medium ${order.status === "Completed" ? "text-green-500" : "text-yellow-500"}`}
                  >
                    {order.status}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </main>
    </div>
  )
}

export default overview2;

function SearchIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  )
}
